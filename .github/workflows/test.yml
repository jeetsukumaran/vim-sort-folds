name: Run tests in vim

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        vim_type: ['vim', 'neovim']
        vim_version: ['head']
        python_version: [ "3.4.x", "3.5.x", "3.6.x", "3.7.x", "3.8.x", "3.9.x" ]
        include:
          # specify "stable" version of vim -> linked against python3.4 only -> disable for now 
          # - vim_type: 'vim'
          #   vim_version: 'stable'
          #   vim_vanilla_version: 'v8.2.0000'

          # TODO: Find a way to add vim_version == 'stable' in matrix and filter out vim/stable
          - vim_type: 'neovim'
            vim_version: 'stable'
            python_version: "3.4.x"
          - vim_type: 'neovim'
            vim_version: 'stable'
            python_version: "3.5.x"
          - vim_type: 'neovim'
            vim_version: 'stable'
            python_version: "3.6.x"
          - vim_type: 'neovim'
            vim_version: 'stable'
            python_version: "3.7.x"
          - vim_type: 'neovim'
            vim_version: 'stable'
            python_version: "3.8.x"
          - vim_type: 'neovim'
            vim_version: 'stable'
            python_version: "3.9.x"

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python_version }}'

      - name: Setup Vim
        id: vim
        uses: thinca/action-setup-vim@v1
        with:
          cache: true
          download: always
          gui: false
          vim_type: '${{ matrix.vim_type }}'
          vim_version: '${{ matrix.vim_vanilla_version || matrix.vim_version }}'

      - name: Ensure pynvim
        if: matrix.vim_type == 'neovim'
        run: python3 -m pip install --user --upgrade pynvim

      - name: Setup environment
        run: |
          echo "EDITOR=${{ steps.vim.outputs.executable }}" >> $GITHUB_ENV

      - name: Setup tests
        run: ./test/setup.sh

      - name: Run tests
        run: |
          set -euo pipefail
          find test -mindepth 1 -maxdepth 1 -type d -print0 | xargs -0 bash ./test/run.sh
